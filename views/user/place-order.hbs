<div class="container mb-5">
    <div class="row" style="margin-top: 90px;">
        <div class="col-md-4 order-md-2 mb-4">
            <h4 class="d-flex justify-content-between align-items-center mb-3">
                <span class="text-dark">Price</span>
            </h4>
            <ul class="list-group mb-3 sticky-top mb-4">
                {{#each products}}
                <li class="list-group-item d-flex justify-content-between lh-condensed">
                    <div>
                        <h6 class="my-0">{{this.product.name}}</h6>
                        <small class="text-muted text-center">{{this.product.type}}</small>
                    </div>
                </li>
                {{/each}}
                <li class="list-group-item d-flex justify-content-between">
                    <span>Total (RS)</span>
                    <strong class="text-dark" name="totalAmount">{{total}}</strong>
                </li>
            </ul>
            <div class="container text-center mt-4">
                {{#each address.address}}
                <p>
                    <label class="mt-2">Add This Address &nbsp;</label>
                    <input type="checkbox" class="text-center" value="`{{this.name}}{{this.lastname}}`,
									`{{this.email}}`,`{{this.mobile}}`,`{{this.address}}`,`{{this.country}}`,`{{this.state}}`,`{{pincode}}`"
                        name="Saved_address" id="{{@index}}"
                        onclick="selectAddress('{{this.name}}','{{this.lastname}}','{{this.email}}','{{this.mobile}}','{{this.address}}','{{this.country}}','{{this.state}}','{{this.pincode}}')">
                    <label for="{{@index}}">
                        {{this.name}}{{this.lastname}},
                        {{this.email}},{{this.mobile}}<br>
                        {{this.address}},{{this.country}},{{this.state}},{{this.pincode}}
                    </label>
                    <br>
                </p>
                {{/each}}
            </div>
        </div>

        <div class="col-md-8 order-md-1 text-dark">
            <h4 class="mb-3">Billing address</h4>
            <form class="needs-validation" novalidate="" id="checkout-form">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <input type="text" name="userId" value="{{user._id}}" hidden>
                        <label for="firstName">First name</label>
                        <input type="text" name="name" class="form-control" id="firstName" placeholder="" value=""
                            required>
                        <div class="invalid-feedback"> Valid first name is required. </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="lastName">Last name</label>
                        <input type="text" name="lastname" class="form-control" id="lastName" placeholder="" value=""
                            required>
                        <div class="invalid-feedback"> Valid last name is required. </div>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="email">Email <span class="text-muted">(Optional)</span></label>
                    <input type="email" name="email" class="form-control" id="email" placeholder="you@example.com"
                        required>
                    <div class="invalid-feedback"> Please enter a valid email address for shipping updates. </div>
                </div>
                <div class="mb-3">
                    <label for="address">Mobile Number</label>
                    <input type="text" name="mobile" class="form-control" id="mobile" placeholder="0000000000" required>
                    <div class="invalid-feedback"> Please enter your shipping address. </div>
                </div>
                <div class="mb-3">
                    <label for="address">Address</label>
                    <input type="text" name="address" class="form-control" id="address" placeholder="1234 Main St"
                        required>
                    <div class="invalid-feedback"> Please enter your shipping address. </div>
                </div>
                <div class="mb-3">
                    <label for="address2">Address 2 <span class="text-muted">(Optional)</span></label>
                    <input type="text" name="address2" class="form-control" id="address2"
                        placeholder="Apartment or suite" required>
                </div>
                <div class="row">
                    <div class="col-md-5 mb-3">
                        <label for="country">Country</label>
                        <select class="custom-select d-block w-100" name="country" id="country">
                            <option value="">Choose...</option>
                            <option id="country">United States</option>
                        </select>
                        <div class="invalid-feedback"> Please select a valid country. </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="state">State</label>
                        <select class="custom-select d-block w-100" name="state" id="state">
                            <option value="">Choose...</option>
                            <option id="state">California</option>
                        </select>
                        <div class="invalid-feedback"> Please provide a valid state. </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label for="zip">Zip</label>
                        <input type="text" class="form-control" id="pincode" placeholder="" name="pincode">
                        <div class="invalid-feedback"> Zip code required. </div>
                    </div>
                </div>
                <hr class="mb-4">


                <hr class="mb-4">
                <h4 class="mb-3">Payment</h4>
                <div class="d-block my-3">
                    <div class="form-check">
                        <input id="credit" name="paymentMethod" onclick="displayCOD()" type="radio" value="cod"
                            class="form-check-input" required>
                        <label class="form-check-label" for="credit">Cash on Delivery</label>
                    </div>
                    <div class="form-check">
                        <input id="debit" name="paymentMethod" onclick="displayRazorpay()" type="radio" value="razorpay"
                            class="form-check-input" required>
                        <label class="form-check-label" for="debit">razorpay</label>
                    </div>
                    <div class="form-check">
                        <input id="paypal" name="paymentMethod" type="radio" onclick="displayPaypal()" value="PayPal"
                            class="form-check-input" required>
                        <label class="form-check-label" for="paypal">PayPal</label>
                    </div>
                    <div id="placeorder"></div>
                </div>

                <script src="/javascripts/paypal.js"></script>
                <hr class="my-4">
                <!-- Replace "test" with your own sandbox Business account app client ID -->
                <script
                    src="https://www.paypal.com/sdk/js?client-id=ASVAT4RqsGB4WwcfuVT2NpKbt0seSFXUW3ic6R5K0oevO6WKB0XoYeWBiwXA75DRi0HvBH_XBQd94qZb&currency=USD"
                    data-namespace="paypal_sdk"></script>

                <!-- Set up a container element for the button -->
                <div id="paypal-button-container" hidden class="clr"></div>
                <div id="checkout-button" class="clr">
                    <button class="w-100 btn btn-primary btn-lg" id="checkoutSubmit" hidden type="submit">Continue
                        to checkout</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
        'use strict'

        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation')

            // Loop over them and prevent submission
            Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault()
                        event.stopPropagation()
                    }
                    form.classList.add('was-validated')
                }, false)
            })
        }, false)
    }())

</script>
<script>
    $("#checkout-form").submit((e) => {
        e.preventDefault()
        $.ajax({
            url: '/place-order',
            method: 'post',
            data: $('#checkout-form').serialize(),
            success: (response) => {
                if (response.cod_success) {
                    location.href = '/order-success'
                } else if (response.RazorPay_success) {
                    razorpayPayment(response)
                } else if (response.Paypal_success) {
                    location.href = '/order-success'
                }
            }
        })
    })

    function selectAddress(name, lastname, email, mobile, address, country, state, pincode) {

        document.getElementById('firstName').value = name
        document.getElementById('lastName').value = lastname
        document.getElementById('email').value = email
        document.getElementById('address').value = address
        document.getElementById('mobile').value = mobile
        document.getElementById('country').value = country
        document.getElementById('state').value = state
        document.getElementById('pincode').value = pincode
    }
    function razorpayPayment(order) {
        var options = {
            "key": "rzp_test_JqPjDeZbLpvY3e", // Enter the Key ID generated from the Dashboard
            "amount": order.amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
            "currency": "INR",
            "name": "Phono-Mart",
            "description": "Test Transaction",
            "image": "https://example.com/your_logo",
            "order_id": order.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1
            "handler": function (response) {
                verifyPayment(response, order)
            },
            "prefill": {
                "name": "Gaurav Kumar",
                "email": "gaurav.kumar@example.com",
                "contact": "9999999999"
            },
            "notes": {
                "address": "Razorpay Corporate Office"
            },
            "theme": {
                "color": "#3399cc"
            }
        };
        var rzp1 = new Razorpay(options);
        rzp1.open();
    }

    function verifyPayment(paymentdata, order) {
        $.ajax({
            url: '/verify-payment',
            data: {
                paymentdata,
                order
            },
            method: 'post',
            success: (response) => {
                if (response.status) {
                    location.href = '/order-success'
                } else {
                    alert('Payment Failed')
                }
            }
        })
    }




    function displayPaypal() {
        let list1 = document.getElementById("checkoutSubmit").hidden = true
        let list2 = document.getElementById("paypal-button-container").hidden = false


    }

    function displayCOD() {
        let list1 = document.getElementById("checkoutSubmit").hidden = false
        let list2 = document.getElementById("paypal-button-container").hidden = true


    }

    function displayRazorpay() {
        let list1 = document.getElementById("checkoutSubmit").hidden = false
        let list2 = document.getElementById("paypal-button-container").hidden = true


    }


    paypal_sdk.Buttons({
        // Sets up the transaction when a payment button is clicked
        createOrder: (data, actions) => {
            return actions.order.create({
                purchase_units: [{
                    amount: {
                        value: {{ total }}  // Can also reference a variable or function
                    }
    }]
            });
        },


    onApprove: (data, actions) => {
        return actions.order.capture().then(function (orderData) {
            console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));
            const transaction = orderData.purchase_units[0].payments.captures[0];
            //alert(`Transaction ${transaction.status}: ${transaction.id}\n\nSee console for all available details`);
            $(document).ready(function () {
                $("#checkoutSubmit").trigger("click");
            })
        });
    }
    }).render('#paypal-button-container');



</script>