<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropper/2.3.4/cropper.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/0.8.1/cropper.min.js"></script>


<div class="container mt-3">
   <div class="card o-hidden border-5 shadow-lg my-5">
      <div class="card-body p-0">
         <div class="row">
            <div class="col-lg">
               <div class="p-5">
                  <div class="text-center">
                     <h1 class="h4 text-gray-900 mb-4">ADD PRODUCTS</h1>
                  </div>

                  <form class="user" action="/admin/addproducts" method="post" enctype="multipart/form-data">

                     <div class="form-group row">
                        <div class="col-sm-6 mb-3 mb-sm-3">
                           <input type="text" class="form-control " id="name" onkeyup="validatename()"
                              placeholder="Product Name" name="name">
                           <span id="name-error" style="color: red;"></span>
                        </div>

                        <div class="col-sm-6">
                           <input type="text" class="form-control " id="modelnumber" onkeyup="validatemodelnumber()"
                              placeholder="Model Number" name="modelnumber">
                           <span id="modelnumber-error" style="color: red;"></span>
                        </div>

                        <div class="col-sm-6 mb-3 mb-sm-3">
                           <input type="number" class="form-control" id="stock"
                              onkeyup="validatestock()" placeholder="Stock" name="stock">
                           <span id="stock-error" style="color: red;"></span>
                        </div>

                        <div class="col-sm-6">
                           <input type="text" class="form-control  " id="modelname"
                              onkeyup="validatemodelname()" placeholder="Model Name" name="modelname">
                           <span id="modelname-error" style="color: red;"></span>
                        </div>

                        <div class="col-sm-6 mb-3 mb-sm-0">
                           <input type="text" class="form-control  " id="series"
                              onkeyup="validateseries()" placeholder="Series" name="series">
                           <span id="series-error" style="color: red;"></span>
                        </div>

                        <div class="col-sm-6">
                           <input type="text" class="form-control  " id="color"
                              onkeyup="validatecolor()" placeholder="Color" name="color">
                           <span id="color-error" style="color: red;"></span>
                        </div>
                     </div>

                     <div class="form-group row">
                        <div class="col-sm-6 mb-3 mb-sm-3">
                           <div class="d-flex">
                              <ul>{{#each categories}}
                                 <li>
                                    <div class="form-check form-check-inline">
                                       <input class="form-check-input" type="radio" name="category" id="inlineRadio2"
                                          value="{{this.category}}" required />
                                       <label class="form-check-label" name="type"
                                          for="inlineRadio2">{{this.category}}</label>
                                    </div>
                                 </li>
                                 {{/each}}
                              </ul>
                           </div>
                        </div>

                        <div class="col-sm-6">
                           <input type="text" class="form-control  " id="batterybackup"
                              onkeyup="validatebatterybackup()" placeholder="Battery Backup" name="batterybackup">
                           <span id="batterybackup-error" style="color: red;"></span>
                        </div>

                        <div class="col-sm-6 mb-3 mb-sm-3">
                           <input type="text" class="form-control  " id="suitablefor"
                              onkeyup="validatesuitablefor()" placeholder="Suitable for" name="suitablefor">
                           <span id="suitablefor-error" style="color: red;"></span>
                        </div>

                        <div class="col-sm-6">
                           <input type="text" class="form-control  " id="powersupply"
                              onkeyup="validatepowersupply()" placeholder="Power Supply" name="powersupply">
                           <span id="powersupply-error" style="color: red;"></span>
                        </div>

                        <div class="col-sm-6 mb-3 mb-sm-0">
                           <input type="file" class=" form-control-user " id="exampleInputPassword" placeholder="Image"
                              name="Image" required>
                        </div>

                        <div class="col-sm-6 mb-3 mb-sm-0">
                           <input type="file" class="form-control-user  " id="exampleInputPassword" placeholder="Image"
                              name="Image1" required>
                        </div>

                        <div class="col-sm-6 mb-3 mb-sm-0">
                           <input type="file" class=" form-control-user " id="exampleInputPassword" placeholder="Image"
                              name="Image2" required>
                        </div>

                        <div class="col-sm-6 mb-3 mb-sm-0">
                           <input type="file" id="id_image1" name="Image3" accept="image/*" onchange="viewImage1(event)"
                              class="form-control-user " placeholder="Image" required>
                           <img src="" id="imgView1" alt="" style="height:100px">
                           <div class="vald-info mb-3" id="info"></div>
                           <h5 class="error_form text-danger" id="image1_error_message"></h5>
                           <div style="display:flex">
                              <div id="image-box1" class="image-container"></div>
                           </div>
                           <button type="button" class="btn btn-outline-dark  ms-3" id="crop-btn1"
                              style="display: none; margin: 1rem 1rem 1rem;">Crop</button>
                        </div>


                        <div class="col-sm-6">
                           <input type="number" class="form-control  " id="price"
                              onkeyup="validateprice()" placeholder="Price" name="price">
                           <span id="price-error" style="color: red;"></span>
                        </div>

                        <div class="col-sm-6">
                           <input type="text" class="form-control " id="description"
                              onkeyup="validatedescription()" placeholder="Description" name="description">
                           <span id="description-error" style="color: red;"></span>
                        </div>
                     </div>

                     <button type="submit" onclick="return validateForm()" class="btn btn-block"
                        style="background-color: #FB641B;color:white ;">Submit</button>
                     <div class="container p-3" style="width: 100%; height: 5rem; text-align: center;">
                        <span id="errorMessage" style="color: red;" class="text-center"></span>
                     </div>
                  </form>
               </div>
            </div>
         </div>
      </div>
   </div>

</div>


{{!-- Cropper --}}
<script>
   const imagebox1 = document.getElementById('image-box1')
   const crop_btn1 = document.getElementById('crop-btn1')
   const input1 = document.getElementById('id_image1')
   function viewImage1(event) {
      var fileInput1 = document.getElementById('id_image1');
      var filePath1 = fileInput1.value;
      var allowedExtensions = /(\.jpg|)$/i;
      if (!allowedExtensions.exec(filePath1)) {
         fileInput1.value = '';
         swal("There is a problem!", "Please choose image file.");
         return false;
      } else {
         document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
      }
   }
   // When user uploads the image this event will get triggered
   input1.addEventListener('change', () => {
      // Getting image file object from the input variable
      const img_data1 = input1.files[0]
      // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
      // The new object URL represents the specified File object or Blob object.
      const url1 = URL.createObjectURL(img_data1)
      // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
      imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`
      // Storing that cropping view image in a variable
      const image = document.getElementById('image')
      // Displaying the image box
      document.getElementById('image-box1').style.display = 'block'
      // Displaying the Crop buttton
      document.getElementById('crop-btn1').style.display = 'block'
      // Hiding the Post button
      const cropper1 = new Cropper(image1, {
         autoCropArea: 1,
         viewMode: 1,
         scalable: false,
         zoomable: false,
         movable: false,
         minCropBoxWidth: 50,
         minCropBoxHeight: 50,
      })
      // When crop button is clicked this event will get triggered
      crop_btn1.addEventListener('click', () => {
         // This method coverts the selected cropped image on the cropper canvas into a blob object
         cropper1.getCroppedCanvas().toBlob((blob) => {
            // Gets the original image data
            let fileInputElement1 = document.getElementById('id_image1');
            // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
            let file1 = new File([blob], img_data1.name, { type: "image/*", lastModified: new Date().getTime() });
            // Create a new container
            let container1 = new DataTransfer();
            // Add the cropped image file to the container
            container1.items.add(file1);
            // Replace the original image file with the new cropped image file
            fileInputElement1.files = container1.files;
            document.getElementById('imgView1').src = URL.createObjectURL(fileInputElement1.files[0])
            // Hide the cropper box
            document.getElementById('image-box1').style.display = 'none'
            // Hide the crop button
            document.getElementById('crop-btn1').style.display = 'none'
         })
      })
   })
</script>
{{!-- End --}}


{{!-- validateForm --}}
<script>


   var nameError = document.getElementById('name-error')
   var modelnumberError = document.getElementById('modelnumber-error')
   var stockError = document.getElementById('stock-error')
   var modelnameError = document.getElementById('modelname-error')
   var seriesError = document.getElementById('series-error')
   var colorError = document.getElementById('color-error')
   var batterybackupError = document.getElementById('batterybackup-error')
   var suitableforError = document.getElementById('suitablefor-error')
   var powersupplyError = document.getElementById('powersupply-error')
   var priceError = document.getElementById('price-error')
   var descriptionError = document.getElementById('description-error')
   var errorMessage = document.getElementById('errorMessage')


   function validatename() {
      var proname = document.getElementById('name').value;
      if (proname.length >= 100 || proname == '') {
         nameError.innerHTML = "Invalid Details"
         return false
      } else {
         nameError.innerHTML = ""
         return true
      }
   }

   function validatemodelnumber() {
      var modelnumber = document.getElementById('modelnumber').value;
      if (modelnumber.length >= 8 || modelnumber == '') {
         modelnumberError.innerHTML = "Invalid Details"
         return false
      } else {
         modelnumberError.innerHTML = ""
         return true
      }
   }

   function validatestock() {
      var stock = document.getElementById('stock').value;
      if (stock == '') {
         stockError.innerHTML = "Invalid Details"
         return false
      } else {
         stockError.innerHTML = ""
         return true
      }
   }

   function validatemodelname() {
      var modelname = document.getElementById('modelname').value;
      if (modelname == '' || modelname.length >= 8) {
         modelnameError.innerHTML = "Invalid Details"
         return false
      } else {
         modelnameError.innerHTML = ""
         return true
      }
   }

   function validateseries() {
      var series = document.getElementById('series').value;
      if (series == '' || series.length >= 8) {
         seriesError.innerHTML = "Invalid Details"
         return false
      } else {
         seriesError.innerHTML = ""
         return true
      }
   }

   function validatecolor() {
      var modelname = document.getElementById('modelname').value;
      if (modelname == '' || modelname.length >= 8) {
         modelnameError.innerHTML = "Invalid Details"
         return false
      } else {
         modelnameError.innerHTML = ""
         return true
      }
   }

   function validatebatterybackup() {
      var batterybackup = document.getElementById('batterybackup').value;
      if (batterybackup == '' || batterybackup.length >= 8) {
         batterybackupError.innerHTML = "Invalid Details"
         return false
      } else {
         batterybackupError.innerHTML = ""
         return true
      }
   }

   function validatesuitablefor() {
      var suitablefor = document.getElementById('suitablefor').value;
      if (suitablefor == '' || suitablefor.length >= 50) {
         suitableforError.innerHTML = "Invalid Details"
         return false
      } else {
         suitableforError.innerHTML = ""
         return true
      }
   }

   function validatepowersupply() {
      var powersupply = document.getElementById('powersupply').value;
      if (powersupply == '') {
         powersupplyError.innerHTML = "Invalid Details"
         return false
      } else {
         powersupplyError.innerHTML = ""
         return true
      }
   }

   function validateprice() {
      var price = document.getElementById('modepricelname').value;
      if (price == '') {
         priceError.innerHTML = "Invalid Details"
         return false
      } else {
         priceError.innerHTML = ""
         return true
      }
   }

   function validatedescription() {
      var description = document.getElementById('description').value;
      if (description == '') {
         descriptionError.innerHTML = "Invalid Details"
         return false
      } else {
         descriptionError.innerHTML = ""
         return true
      }
   }


   function validateForm() {
      if (!validatename() || !validatemodelnumber() || !validatestock() || !validatemodelname() || !validateseries() || !validatecolor() || !validatebatterybackup() || !validatesuitablefor() || !validatepowersupply() || !validateprice() || !validatedescription())
         errorMessage.style.display = 'block';
      errorMessage.innerHTML = "Enter All Details Properly";
      setTimeout(function () { errorMessage.style.display = 'none'; }, 3000);
      return false;
   }
</script>
{{!-- End --}}